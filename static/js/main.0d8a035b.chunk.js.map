{"version":3,"sources":["logo.svg","View.js","App.js","reportWebVitals.js","index.js"],"names":["View","state","signed","database","firebase","Button","variant","color","disabled","this","onClick","signIn","props","user","displayName","Component","App","console","log","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","authProvider","auth","GoogleAuthProvider","className","src","photoURL","hidden","logo","alt","signInWithPopup","then","result","credential","accessToken","setState","catch","error","code","message","email","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAAe,MAA0B,iC,qCCyB1BA,E,kDAnBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CAACC,QAAS,GACvB,EAAKC,SAAWC,IAASD,WAHf,E,0CAMd,WAAU,IAAD,OACL,OACM,gCACE,cAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,SAAUC,KAAKR,MAAMC,OAAQQ,QAAS,kBAAI,EAAKC,UAA3F,+BAGCF,KAAKG,MAAMC,KAAKC,mB,GAbdC,aCwEJC,G,wDApEb,aAAe,IAAD,sBACZ,eACAC,QAAQC,IAAI,OAFA,OAaGd,IAASe,KAAKC,QAEnBhB,IAASiB,cAXY,CACnBC,OAAQ,0CACRC,WAAY,2CACZC,UAAW,2BACXC,cAAe,uCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAS3B,EAAK3B,MAAQ,CAACC,QAAS,EAAOW,KAAM,IACpC,EAAKgB,aAAe,IAAIzB,IAAS0B,KAAKC,mBArB1B,E,0CAwBd,WAAU,IAAD,OACP,OACE,sBAAKC,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAU,qBAAf,SACE,cAAC3B,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,SAAUC,KAAKR,MAAMC,OAAQQ,QAAS,kBAAI,EAAKC,UAA3F,iCAIF,qBAAKsB,IAAKxB,KAAKR,MAAMY,KAAKqB,SAAUF,UAAU,eAAeG,QAAS1B,KAAKR,MAAMC,SACjF,qBAAK+B,IAAKG,EAAMJ,UAAU,WAAWK,IAAI,YAE3C,cAAC,EAAD,CAAMxB,KAAMJ,KAAKR,MAAMY,Y,oBAK7B,WAAU,IAAD,OACPT,IAAS0B,OACNQ,gBAAgB7B,KAAKoB,cACrBU,MAAK,SAACC,GAEYA,EAAOC,WAGDC,YAHvB,IAKI7B,EAAO2B,EAAO3B,KAElB,EAAK8B,SAAS,CAACzC,QAAO,EAAMW,KAAM2B,EAAO3B,OACzCI,QAAQC,IAAIL,EAAKC,gBAChB8B,OAAM,SAACC,GAEQA,EAAMC,KACHD,EAAME,QAEbF,EAAMG,MAEDH,EAAMJ,kB,GA/Db1B,cCIHkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0d8a035b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Component } from 'react';\nimport './View.css';\nimport Button from '@material-ui/core/Button';\nimport firebase from \"firebase/app\";\n\nclass View extends Component {\n    constructor() {\n        super();\n        this.state = {signed : false};\n        this.database = firebase.database();\n      }\n\n    render() {\n        return (\n              <div>\n                <Button variant=\"contained\" color=\"primary\" disabled={this.state.signed} onClick={()=>this.signIn()}> \n                  Sign in to Google \n                </Button>\n                {this.props.user.displayName}\n              </div>\n\n        );\n      }\n}\n\nexport default View;","import logo from './logo.svg';\nimport './App.css';\nimport View from './View.js';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport Button from '@material-ui/core/Button';\nimport { Component } from 'react';\n\nclass App extends Component {\n  constructor() {\n    super();\n    console.log('foo');\n              // Your web app's Firebase configuration\n              var firebaseConfig = {\n                apiKey: \"AIzaSyB4X2zC7tYE6T5e0rIBlZ8RzbNhnAQ58Ws\",\n                authDomain: \"multiplayer-trivia-68951.firebaseapp.com\",\n                projectId: \"multiplayer-trivia-68951\",\n                storageBucket: \"multiplayer-trivia-68951.appspot.com\",\n                messagingSenderId: \"1016103210575\",\n                appId: \"1:1016103210575:web:c997edfe327ca68893e43a\",\n                measurementId: \"G-7JBQP4CF0Y\"\n              };\n              if (!firebase.apps.length){\n              // Initialize Firebase\n              firebase.initializeApp(firebaseConfig);\n              }\n              \n      \n      \n    this.state = {signed : false, user: {}};\n    this.authProvider = new firebase.auth.GoogleAuthProvider();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"Sign-in-button-div\">\n            <Button variant=\"contained\" color=\"primary\" disabled={this.state.signed} onClick={()=>this.signIn()}> \n              Sign in to Google \n            </Button>\n          </div>\n          <img src={this.state.user.photoURL} className=\"Google-photo\" hidden={!this.state.signed}></img>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <View user={this.state.user}></View>\n      </div>\n    );\n  }\n\n  signIn() {\n    firebase.auth()\n      .signInWithPopup(this.authProvider)\n      .then((result) => {\n        /** @type {firebase.auth.OAuthCredential} */\n        var credential = result.credential;\n\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        var token = credential.accessToken;\n        // The signed-in user info.\n        var user = result.user;\n        // ...\n        this.setState({signed:true, user: result.user});\n        console.log(user.displayName);\n      }).catch((error) => {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // The email of the user's account used.\n        var email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential;\n        // ...\n      });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}